
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CIN COMMA COUT DIVIDE ELSE EQUALS FLOAT FOR GREATER GREATEREQUAL IDENTIFIER IF INCLUDE INT IOSTREAM LBRACE LEFTSHIFT LESS LESSEQUAL LPAREN MINUS NAMESPACE NUMBER PLUS RBRACE RETURN RIGHTSHIFT RPAREN SEMICOLON STD STRING STRING_LITERAL TIMES USING VOID WHILEprogram : statementsstatements : statement\n                  | statements statementstatement : include_statement\n                 | using_namespace\n                 | declaration\n                 | assignment\n                 | cout_statement\n                 | cin_statement\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | function_definition\n                 | function_call\n                 | return_statement\n                 | expression SEMICOLONinclude_statement : INCLUDE LESS IOSTREAM GREATERusing_namespace : USING NAMESPACE STD SEMICOLONdeclaration : type declarator_list SEMICOLONdeclarator_list : declaratordeclarator_list : declarator COMMA declarator_listdeclarator : IDENTIFIER\n                  | IDENTIFIER EQUALS expressiontype : INT\n            | FLOAT\n            | STRING\n            | VOIDassignment : IDENTIFIER EQUALS expression SEMICOLONcout_statement : COUT LEFTSHIFT cout_args SEMICOLONcout_args : expression\n                 | cout_args LEFTSHIFT expressioncin_statement : CIN RIGHTSHIFT cin_args SEMICOLONcin_args : IDENTIFIERcin_args : IDENTIFIER RIGHTSHIFT cin_argsif_statement : IF LPAREN expression RPAREN compound_statement\n                    | IF LPAREN expression RPAREN compound_statement ELSE compound_statementwhile_statement : WHILE LPAREN expression RPAREN compound_statementfor_statement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement\n                     | FOR LPAREN declaration expression SEMICOLON expression RPAREN compound_statementcompound_statement : LBRACE statements RBRACEfunction_definition : type IDENTIFIER LPAREN parameters RPAREN compound_statementparameters : parameters : type IDENTIFIERparameters : type IDENTIFIER COMMA parametersfunction_call : IDENTIFIER LPAREN arguments RPAREN SEMICOLONarguments : arguments : expressionarguments : expression COMMA argumentsreturn_statement : RETURN expression SEMICOLONexpression : IDENTIFIER\n                  | NUMBER\n                  | STRING_LITERAL\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression LESSEQUAL expression\n                  | expression GREATEREQUAL expression\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'INCLUDE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,17,-37,-41,17,-36,-40,-39,-38,]),'USING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,18,-37,-41,18,-36,-40,-39,-38,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,24,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,49,50,51,52,53,56,57,69,71,72,84,85,86,87,88,89,94,96,97,98,99,100,103,107,111,112,113,115,117,119,120,123,124,128,129,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,47,55,55,-24,-25,-26,-27,-3,-16,55,55,55,55,55,55,55,55,55,55,55,79,55,55,55,-19,55,93,55,93,-49,-17,-18,105,-28,55,55,-29,-32,79,55,-45,-35,20,-37,55,-41,20,55,-36,-40,-39,-38,]),'COUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,21,-37,-41,21,-36,-40,-39,-38,]),'CIN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,22,-37,-41,22,-36,-40,-39,-38,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,23,-37,-41,23,-36,-40,-39,-38,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[25,25,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,25,-37,-41,25,-36,-40,-39,-38,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[26,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,26,-37,-41,26,-36,-40,-39,-38,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,112,113,117,119,123,124,128,129,],[27,27,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,27,-37,-41,27,-36,-40,-39,-38,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,27,34,35,36,37,38,39,40,41,42,43,49,50,51,53,56,57,69,71,84,86,87,88,94,96,97,98,99,103,107,111,112,113,115,117,119,120,123,124,128,129,],[28,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,28,28,-3,-16,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-19,28,28,-49,-17,-18,-28,28,28,-29,-32,28,-45,-35,28,-37,28,-41,28,28,-36,-40,-39,-38,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,27,34,35,36,37,38,39,40,41,42,43,49,50,51,53,56,57,69,71,84,86,87,88,94,96,97,98,99,103,107,111,112,113,115,117,119,120,123,124,128,129,],[29,29,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,29,29,-3,-16,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-19,29,29,-49,-17,-18,-28,29,29,-29,-32,29,-45,-35,29,-37,29,-41,29,29,-36,-40,-39,-38,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,23,24,25,26,27,34,35,36,37,38,39,40,41,42,43,47,49,50,51,53,56,57,69,71,84,86,87,88,94,96,97,98,99,103,107,111,112,113,115,117,119,120,123,124,128,129,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,50,53,24,56,57,24,-3,-16,24,24,24,24,24,24,24,24,70,24,24,24,24,24,24,-19,24,24,-49,-17,-18,-28,24,24,-29,-32,24,-45,-35,24,-37,24,-41,24,24,-36,-40,-39,-38,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,57,69,70,86,87,88,94,98,99,107,111,112,113,116,117,119,123,124,128,129,],[30,30,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,30,-19,30,-49,-17,-18,-28,-29,-32,-45,-35,30,-37,30,-41,30,-36,-40,-39,-38,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,57,69,70,86,87,88,94,98,99,107,111,112,113,116,117,119,123,124,128,129,],[31,31,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,31,-19,31,-49,-17,-18,-28,-29,-32,-45,-35,31,-37,31,-41,31,-36,-40,-39,-38,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,57,69,70,86,87,88,94,98,99,107,111,112,113,116,117,119,123,124,128,129,],[32,32,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,32,-19,32,-49,-17,-18,-28,-29,-32,-45,-35,32,-37,32,-41,32,-36,-40,-39,-38,]),'VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,57,69,70,86,87,88,94,98,99,107,111,112,113,116,117,119,123,124,128,129,],[33,33,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,33,-19,33,-49,-17,-18,-28,-29,-32,-45,-35,33,-37,33,-41,33,-36,-40,-39,-38,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,113,117,123,124,128,129,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,-37,-41,-36,-40,-39,-38,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,34,35,69,86,87,88,94,98,99,107,111,113,117,119,123,124,128,129,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-3,-16,-19,-49,-17,-18,-28,-29,-32,-45,-35,-37,-41,124,-36,-40,-39,-38,]),'SEMICOLON':([16,20,28,29,46,47,48,55,58,59,60,61,62,63,64,65,66,68,73,76,77,78,79,81,83,91,92,93,95,104,109,110,114,],[35,-50,-51,-52,69,-22,-20,-50,86,-53,-54,-55,-56,-57,-58,-59,-60,88,94,98,-30,99,-33,-61,103,-23,-21,-22,107,115,-31,-34,120,]),'PLUS':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[36,-50,-51,-52,36,-50,36,36,36,36,36,36,36,36,36,36,36,36,36,-61,36,36,36,36,36,36,36,36,]),'MINUS':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[37,-50,-51,-52,37,-50,37,37,37,37,37,37,37,37,37,37,37,37,37,-61,37,37,37,37,37,37,37,37,]),'TIMES':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[38,-50,-51,-52,38,-50,38,38,38,38,38,38,38,38,38,38,38,38,38,-61,38,38,38,38,38,38,38,38,]),'DIVIDE':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[39,-50,-51,-52,39,-50,39,39,39,39,39,39,39,39,39,39,39,39,39,-61,39,39,39,39,39,39,39,39,]),'LESS':([16,17,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[40,44,-50,-51,-52,40,-50,40,40,40,40,40,40,40,40,40,40,40,40,40,-61,40,40,40,40,40,40,40,40,]),'GREATER':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,67,73,75,77,80,81,82,83,91,104,109,114,121,125,],[41,-50,-51,-52,41,-50,41,41,41,41,41,41,41,41,41,87,41,41,41,41,-61,41,41,41,41,41,41,41,41,]),'LESSEQUAL':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[42,-50,-51,-52,42,-50,42,42,42,42,42,42,42,42,42,42,42,42,42,-61,42,42,42,42,42,42,42,42,]),'GREATEREQUAL':([16,20,28,29,54,55,58,59,60,61,62,63,64,65,66,73,75,77,80,81,82,83,91,104,109,114,121,125,],[43,-50,-51,-52,43,-50,43,43,43,43,43,43,43,43,43,43,43,43,43,-61,43,43,43,43,43,43,43,43,]),'NAMESPACE':([18,],[45,]),'EQUALS':([20,47,93,],[49,71,71,]),'LEFTSHIFT':([21,28,29,55,59,60,61,62,63,64,65,66,76,77,81,109,],[51,-51,-52,-50,-53,-54,-55,-56,-57,-58,-59,-60,97,-30,-61,-31,]),'RIGHTSHIFT':([22,79,],[52,100,]),'RPAREN':([28,29,50,54,55,59,60,61,62,63,64,65,66,70,74,75,80,81,82,90,96,105,108,116,121,122,125,],[-51,-52,-46,81,-50,-53,-54,-55,-56,-57,-58,-59,-60,-42,95,-47,101,-61,102,106,-46,-43,-48,-42,126,-44,127,]),'COMMA':([28,29,47,48,55,59,60,61,62,63,64,65,66,75,81,91,93,105,],[-51,-52,-22,72,-50,-53,-54,-55,-56,-57,-58,-59,-60,96,-61,-23,-22,116,]),'IOSTREAM':([44,],[67,]),'STD':([45,],[68,]),'LBRACE':([101,102,106,118,126,127,],[112,112,112,112,112,112,]),'ELSE':([111,124,],[118,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,112,],[2,119,]),'statement':([0,2,112,119,],[3,34,3,34,]),'include_statement':([0,2,112,119,],[4,4,4,4,]),'using_namespace':([0,2,112,119,],[5,5,5,5,]),'declaration':([0,2,57,112,119,],[6,6,84,6,6,]),'assignment':([0,2,112,119,],[7,7,7,7,]),'cout_statement':([0,2,112,119,],[8,8,8,8,]),'cin_statement':([0,2,112,119,],[9,9,9,9,]),'if_statement':([0,2,112,119,],[10,10,10,10,]),'while_statement':([0,2,112,119,],[11,11,11,11,]),'for_statement':([0,2,112,119,],[12,12,12,12,]),'function_definition':([0,2,112,119,],[13,13,13,13,]),'function_call':([0,2,112,119,],[14,14,14,14,]),'return_statement':([0,2,112,119,],[15,15,15,15,]),'expression':([0,2,24,27,36,37,38,39,40,41,42,43,49,50,51,53,56,57,71,84,96,97,103,112,115,119,120,],[16,16,54,58,59,60,61,62,63,64,65,66,73,75,77,80,82,83,91,104,75,109,114,16,121,16,125,]),'type':([0,2,57,70,112,116,119,],[19,19,85,89,19,89,19,]),'declarator_list':([19,72,85,],[46,92,46,]),'declarator':([19,72,85,],[48,48,48,]),'arguments':([50,96,],[74,108,]),'cout_args':([51,],[76,]),'cin_args':([52,100,],[78,110,]),'parameters':([70,116,],[90,122,]),'compound_statement':([101,102,106,118,126,127,],[111,113,117,123,128,129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','transpiler.py',88),
  ('statements -> statement','statements',1,'p_statements','transpiler.py',92),
  ('statements -> statements statement','statements',2,'p_statements','transpiler.py',93),
  ('statement -> include_statement','statement',1,'p_statement','transpiler.py',100),
  ('statement -> using_namespace','statement',1,'p_statement','transpiler.py',101),
  ('statement -> declaration','statement',1,'p_statement','transpiler.py',102),
  ('statement -> assignment','statement',1,'p_statement','transpiler.py',103),
  ('statement -> cout_statement','statement',1,'p_statement','transpiler.py',104),
  ('statement -> cin_statement','statement',1,'p_statement','transpiler.py',105),
  ('statement -> if_statement','statement',1,'p_statement','transpiler.py',106),
  ('statement -> while_statement','statement',1,'p_statement','transpiler.py',107),
  ('statement -> for_statement','statement',1,'p_statement','transpiler.py',108),
  ('statement -> function_definition','statement',1,'p_statement','transpiler.py',109),
  ('statement -> function_call','statement',1,'p_statement','transpiler.py',110),
  ('statement -> return_statement','statement',1,'p_statement','transpiler.py',111),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','transpiler.py',112),
  ('include_statement -> INCLUDE LESS IOSTREAM GREATER','include_statement',4,'p_include_statement','transpiler.py',116),
  ('using_namespace -> USING NAMESPACE STD SEMICOLON','using_namespace',4,'p_using_namespace','transpiler.py',120),
  ('declaration -> type declarator_list SEMICOLON','declaration',3,'p_declaration','transpiler.py',124),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_single','transpiler.py',134),
  ('declarator_list -> declarator COMMA declarator_list','declarator_list',3,'p_declarator_list_multi','transpiler.py',138),
  ('declarator -> IDENTIFIER','declarator',1,'p_declarator','transpiler.py',142),
  ('declarator -> IDENTIFIER EQUALS expression','declarator',3,'p_declarator','transpiler.py',143),
  ('type -> INT','type',1,'p_type','transpiler.py',150),
  ('type -> FLOAT','type',1,'p_type','transpiler.py',151),
  ('type -> STRING','type',1,'p_type','transpiler.py',152),
  ('type -> VOID','type',1,'p_type','transpiler.py',153),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','transpiler.py',157),
  ('cout_statement -> COUT LEFTSHIFT cout_args SEMICOLON','cout_statement',4,'p_cout_statement','transpiler.py',161),
  ('cout_args -> expression','cout_args',1,'p_cout_args','transpiler.py',165),
  ('cout_args -> cout_args LEFTSHIFT expression','cout_args',3,'p_cout_args','transpiler.py',166),
  ('cin_statement -> CIN RIGHTSHIFT cin_args SEMICOLON','cin_statement',4,'p_cin_statement','transpiler.py',173),
  ('cin_args -> IDENTIFIER','cin_args',1,'p_cin_args_single','transpiler.py',177),
  ('cin_args -> IDENTIFIER RIGHTSHIFT cin_args','cin_args',3,'p_cin_args_multi','transpiler.py',181),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement','if_statement',5,'p_if_statement','transpiler.py',185),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','if_statement',7,'p_if_statement','transpiler.py',186),
  ('while_statement -> WHILE LPAREN expression RPAREN compound_statement','while_statement',5,'p_while_statement','transpiler.py',193),
  ('for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement','for_statement',9,'p_for_statement','transpiler.py',197),
  ('for_statement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN compound_statement','for_statement',8,'p_for_statement','transpiler.py',198),
  ('compound_statement -> LBRACE statements RBRACE','compound_statement',3,'p_compound_statement','transpiler.py',208),
  ('function_definition -> type IDENTIFIER LPAREN parameters RPAREN compound_statement','function_definition',6,'p_function_definition','transpiler.py',214),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','transpiler.py',221),
  ('parameters -> type IDENTIFIER','parameters',2,'p_parameters_single','transpiler.py',225),
  ('parameters -> type IDENTIFIER COMMA parameters','parameters',4,'p_parameters_multi','transpiler.py',229),
  ('function_call -> IDENTIFIER LPAREN arguments RPAREN SEMICOLON','function_call',5,'p_function_call','transpiler.py',233),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','transpiler.py',237),
  ('arguments -> expression','arguments',1,'p_arguments_single','transpiler.py',241),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments_multi','transpiler.py',245),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','transpiler.py',249),
  ('expression -> IDENTIFIER','expression',1,'p_expression','transpiler.py',253),
  ('expression -> NUMBER','expression',1,'p_expression','transpiler.py',254),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','transpiler.py',255),
  ('expression -> expression PLUS expression','expression',3,'p_expression','transpiler.py',256),
  ('expression -> expression MINUS expression','expression',3,'p_expression','transpiler.py',257),
  ('expression -> expression TIMES expression','expression',3,'p_expression','transpiler.py',258),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','transpiler.py',259),
  ('expression -> expression LESS expression','expression',3,'p_expression','transpiler.py',260),
  ('expression -> expression GREATER expression','expression',3,'p_expression','transpiler.py',261),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression','transpiler.py',262),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression','transpiler.py',263),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','transpiler.py',264),
]
