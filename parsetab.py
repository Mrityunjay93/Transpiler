
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CIN COMMA COUT DIVIDE ELSE EQUALS FLOAT FOR GREATER GREATEREQUAL IDENTIFIER IF INCLUDE INT IOSTREAM LBRACE LEFTSHIFT LESS LESSEQUAL LPAREN MINUS NUMBER PLUS RBRACE RETURN RIGHTSHIFT RPAREN SEMICOLON STRING STRING_LITERAL TIMES VOID WHILEprogram : statementsstatements : statement\n                  | statements statementstatement : include_statement\n                 | declaration\n                 | assignment\n                 | cout_statement\n                 | cin_statement\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | function_definition\n                 | function_call\n                 | return_statement\n                 | expression SEMICOLONinclude_statement : INCLUDE LESS IOSTREAM GREATERdeclaration : type IDENTIFIER SEMICOLON\n                   | type IDENTIFIER EQUALS expression SEMICOLONtype : INT\n            | FLOAT\n            | STRING\n            | VOIDassignment : IDENTIFIER EQUALS expression SEMICOLONcout_statement : COUT LEFTSHIFT expression SEMICOLONcin_statement : CIN RIGHTSHIFT IDENTIFIER SEMICOLONif_statement : IF LPAREN expression RPAREN compound_statement\n                    | IF LPAREN expression RPAREN compound_statement ELSE compound_statementwhile_statement : WHILE LPAREN expression RPAREN compound_statementfor_statement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statementcompound_statement : LBRACE statements RBRACEfunction_definition : type IDENTIFIER LPAREN parameters RPAREN compound_statementparameters : type IDENTIFIER\n                  | type IDENTIFIER COMMA parameters\n                  | function_call : IDENTIFIER LPAREN arguments RPAREN SEMICOLONarguments : expression\n                 | expression COMMA arguments\n                 | return_statement : RETURN expression SEMICOLONexpression : IDENTIFIER\n                  | NUMBER\n                  | STRING_LITERAL\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression LESSEQUAL expression\n                  | expression GREATEREQUAL expression\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'INCLUDE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,16,-28,-31,16,-27,-30,-29,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,22,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,51,52,63,64,75,76,78,80,82,83,84,87,88,91,93,94,95,98,100,101,103,104,107,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,43,50,50,-19,-20,-21,-22,-3,-15,50,50,50,50,50,50,50,50,50,50,50,70,50,50,50,-17,50,-39,-16,89,-23,50,-24,-25,50,-18,-35,-26,18,-28,-31,18,50,-27,-30,-29,]),'COUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,19,-28,-31,19,-27,-30,-29,]),'CIN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,20,-28,-31,20,-27,-30,-29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,21,-28,-31,21,-27,-30,-29,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,23,-28,-31,23,-27,-30,-29,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,24,-28,-31,24,-27,-30,-29,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,94,95,98,100,103,104,107,],[25,25,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,25,-28,-31,25,-27,-30,-29,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,22,25,32,33,34,35,36,37,38,39,40,41,44,45,46,48,51,52,63,64,75,76,80,82,83,84,87,88,91,93,94,95,98,100,101,103,104,107,],[26,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,26,26,-3,-15,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-17,26,-39,-16,-23,26,-24,-25,26,-18,-35,-26,26,-28,-31,26,26,-27,-30,-29,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,22,25,32,33,34,35,36,37,38,39,40,41,44,45,46,48,51,52,63,64,75,76,80,82,83,84,87,88,91,93,94,95,98,100,101,103,104,107,],[27,27,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,27,-3,-15,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-17,27,-39,-16,-23,27,-24,-25,27,-18,-35,-26,27,-28,-31,27,27,-27,-30,-29,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,21,22,23,24,25,32,33,34,35,36,37,38,39,40,41,43,44,45,46,48,51,52,63,64,75,76,80,82,83,84,87,88,91,93,94,95,98,100,101,103,104,107,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,45,48,22,51,52,22,-3,-15,22,22,22,22,22,22,22,22,65,22,22,22,22,22,22,-17,22,-39,-16,-23,22,-24,-25,22,-18,-35,-26,22,-28,-31,22,22,-27,-30,-29,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,65,75,76,80,83,84,88,91,93,94,95,97,98,100,103,104,107,],[28,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,28,-39,-16,-23,-24,-25,-18,-35,-26,28,-28,28,-31,28,-27,-30,-29,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,65,75,76,80,83,84,88,91,93,94,95,97,98,100,103,104,107,],[29,29,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,29,-39,-16,-23,-24,-25,-18,-35,-26,29,-28,29,-31,29,-27,-30,-29,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,65,75,76,80,83,84,88,91,93,94,95,97,98,100,103,104,107,],[30,30,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,30,-39,-16,-23,-24,-25,-18,-35,-26,30,-28,30,-31,30,-27,-30,-29,]),'VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,65,75,76,80,83,84,88,91,93,94,95,97,98,100,103,104,107,],[31,31,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,31,-39,-16,-23,-24,-25,-18,-35,-26,31,-28,31,-31,31,-27,-30,-29,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,95,98,103,104,107,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,-28,-31,-27,-30,-29,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,32,33,63,75,76,80,83,84,88,91,93,95,98,100,103,104,107,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-3,-15,-17,-39,-16,-23,-24,-25,-18,-35,-26,-28,-31,104,-27,-30,-29,]),'SEMICOLON':([15,18,26,27,43,50,53,54,55,56,57,58,59,60,61,66,69,70,72,74,77,81,96,],[33,-40,-41,-42,63,-40,75,-43,-44,-45,-46,-47,-48,-49,-50,80,83,84,-51,87,88,91,101,]),'PLUS':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[34,-40,-41,-42,34,-40,34,34,34,34,34,34,34,34,34,34,34,34,34,-51,34,34,34,34,34,]),'MINUS':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[35,-40,-41,-42,35,-40,35,35,35,35,35,35,35,35,35,35,35,35,35,-51,35,35,35,35,35,]),'TIMES':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[36,-40,-41,-42,36,-40,36,36,36,36,36,36,36,36,36,36,36,36,36,-51,36,36,36,36,36,]),'DIVIDE':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[37,-40,-41,-42,37,-40,37,37,37,37,37,37,37,37,37,37,37,37,37,-51,37,37,37,37,37,]),'LESS':([15,16,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[38,42,-40,-41,-42,38,-40,38,38,38,38,38,38,38,38,38,38,38,38,38,-51,38,38,38,38,38,]),'GREATER':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,62,66,68,69,71,72,73,74,77,96,105,],[39,-40,-41,-42,39,-40,39,39,39,39,39,39,39,39,39,76,39,39,39,39,-51,39,39,39,39,39,]),'LESSEQUAL':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[40,-40,-41,-42,40,-40,40,40,40,40,40,40,40,40,40,40,40,40,40,-51,40,40,40,40,40,]),'GREATEREQUAL':([15,18,26,27,49,50,53,54,55,56,57,58,59,60,61,66,68,69,71,72,73,74,77,96,105,],[41,-40,-41,-42,41,-40,41,41,41,41,41,41,41,41,41,41,41,41,41,-51,41,41,41,41,41,]),'EQUALS':([18,43,],[44,64,]),'LEFTSHIFT':([19,],[46,]),'RIGHTSHIFT':([20,],[47,]),'RPAREN':([26,27,45,49,50,54,55,56,57,58,59,60,61,65,67,68,71,72,73,79,82,89,92,97,102,105,],[-41,-42,-38,72,-40,-43,-44,-45,-46,-47,-48,-49,-50,-34,81,-36,85,-51,86,90,-38,-32,-37,-34,-33,106,]),'COMMA':([26,27,50,54,55,56,57,58,59,60,61,68,72,89,],[-41,-42,-40,-43,-44,-45,-46,-47,-48,-49,-50,82,-51,97,]),'IOSTREAM':([42,],[62,]),'LBRACE':([85,86,90,99,106,],[94,94,94,94,94,]),'ELSE':([93,104,],[99,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,94,],[2,100,]),'statement':([0,2,94,100,],[3,32,3,32,]),'include_statement':([0,2,94,100,],[4,4,4,4,]),'declaration':([0,2,94,100,],[5,5,5,5,]),'assignment':([0,2,94,100,],[6,6,6,6,]),'cout_statement':([0,2,94,100,],[7,7,7,7,]),'cin_statement':([0,2,94,100,],[8,8,8,8,]),'if_statement':([0,2,94,100,],[9,9,9,9,]),'while_statement':([0,2,94,100,],[10,10,10,10,]),'for_statement':([0,2,94,100,],[11,11,11,11,]),'function_definition':([0,2,94,100,],[12,12,12,12,]),'function_call':([0,2,94,100,],[13,13,13,13,]),'return_statement':([0,2,94,100,],[14,14,14,14,]),'expression':([0,2,22,25,34,35,36,37,38,39,40,41,44,45,46,48,51,52,64,82,87,94,100,101,],[15,15,49,53,54,55,56,57,58,59,60,61,66,68,69,71,73,74,77,68,96,15,15,105,]),'type':([0,2,65,94,97,100,],[17,17,78,17,78,17,]),'arguments':([45,82,],[67,92,]),'parameters':([65,97,],[79,102,]),'compound_statement':([85,86,90,99,106,],[93,95,98,103,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','project.py',80),
  ('statements -> statement','statements',1,'p_statements','project.py',84),
  ('statements -> statements statement','statements',2,'p_statements','project.py',85),
  ('statement -> include_statement','statement',1,'p_statement','project.py',92),
  ('statement -> declaration','statement',1,'p_statement','project.py',93),
  ('statement -> assignment','statement',1,'p_statement','project.py',94),
  ('statement -> cout_statement','statement',1,'p_statement','project.py',95),
  ('statement -> cin_statement','statement',1,'p_statement','project.py',96),
  ('statement -> if_statement','statement',1,'p_statement','project.py',97),
  ('statement -> while_statement','statement',1,'p_statement','project.py',98),
  ('statement -> for_statement','statement',1,'p_statement','project.py',99),
  ('statement -> function_definition','statement',1,'p_statement','project.py',100),
  ('statement -> function_call','statement',1,'p_statement','project.py',101),
  ('statement -> return_statement','statement',1,'p_statement','project.py',102),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','project.py',103),
  ('include_statement -> INCLUDE LESS IOSTREAM GREATER','include_statement',4,'p_include_statement','project.py',107),
  ('declaration -> type IDENTIFIER SEMICOLON','declaration',3,'p_declaration','project.py',111),
  ('declaration -> type IDENTIFIER EQUALS expression SEMICOLON','declaration',5,'p_declaration','project.py',112),
  ('type -> INT','type',1,'p_type','project.py',119),
  ('type -> FLOAT','type',1,'p_type','project.py',120),
  ('type -> STRING','type',1,'p_type','project.py',121),
  ('type -> VOID','type',1,'p_type','project.py',122),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','project.py',126),
  ('cout_statement -> COUT LEFTSHIFT expression SEMICOLON','cout_statement',4,'p_cout_statement','project.py',130),
  ('cin_statement -> CIN RIGHTSHIFT IDENTIFIER SEMICOLON','cin_statement',4,'p_cin_statement','project.py',134),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement','if_statement',5,'p_if_statement','project.py',138),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','if_statement',7,'p_if_statement','project.py',139),
  ('while_statement -> WHILE LPAREN expression RPAREN compound_statement','while_statement',5,'p_while_statement','project.py',146),
  ('for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement','for_statement',9,'p_for_statement','project.py',150),
  ('compound_statement -> LBRACE statements RBRACE','compound_statement',3,'p_compound_statement','project.py',154),
  ('function_definition -> type IDENTIFIER LPAREN parameters RPAREN compound_statement','function_definition',6,'p_function_definition','project.py',158),
  ('parameters -> type IDENTIFIER','parameters',2,'p_parameters','project.py',162),
  ('parameters -> type IDENTIFIER COMMA parameters','parameters',4,'p_parameters','project.py',163),
  ('parameters -> <empty>','parameters',0,'p_parameters','project.py',164),
  ('function_call -> IDENTIFIER LPAREN arguments RPAREN SEMICOLON','function_call',5,'p_function_call','project.py',173),
  ('arguments -> expression','arguments',1,'p_arguments','project.py',177),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','project.py',178),
  ('arguments -> <empty>','arguments',0,'p_arguments','project.py',179),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','project.py',188),
  ('expression -> IDENTIFIER','expression',1,'p_expression','project.py',192),
  ('expression -> NUMBER','expression',1,'p_expression','project.py',193),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','project.py',194),
  ('expression -> expression PLUS expression','expression',3,'p_expression','project.py',195),
  ('expression -> expression MINUS expression','expression',3,'p_expression','project.py',196),
  ('expression -> expression TIMES expression','expression',3,'p_expression','project.py',197),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','project.py',198),
  ('expression -> expression LESS expression','expression',3,'p_expression','project.py',199),
  ('expression -> expression GREATER expression','expression',3,'p_expression','project.py',200),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression','project.py',201),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression','project.py',202),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','project.py',203),
]
